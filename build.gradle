plugins {
    id 'groovy'
    id "com.github.hierynomus.license" version "0.13.1"
    id 'jacoco'
    id 'codenarc'
    id 'maven'
    id 'maven-publish'
    id 'com.github.kt3k.coveralls' version '2.7.1'
}

group = 'com.stehno.ersatz'
version = '0.0.1'

sourceCompatibility = 8
targetCompatibility = 8


repositories {
    jcenter()
}

configurations {
    groovyDoc
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'io.undertow:undertow-core:1.4.6.Final'

    testCompile 'com.squareup.okhttp3:okhttp:3.5.0'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'

    groovyDoc 'org.codehaus.groovy:groovy-groovydoc:2.4.7'
    groovyDoc 'org.codehaus.groovy:groovy-ant:2.4.7'

    codenarc(
        'org.codenarc:CodeNarc:0.26.0',
        'org.codehaus.groovy:groovy-all:2.4.7'
    )
}

codenarc {
    toolVersion = '0.26.0'
}

codenarcMain {
    ignoreFailures false
    configFile file('config/codenarc-main.rules')

    maxPriority1Violations 0
    maxPriority2Violations 5
    maxPriority3Violations 10
}

codenarcTest {
    ignoreFailures true
    configFile file('config/codenarc-test.rules')
}

groovydoc {
    groovyClasspath = configurations.groovyDoc
}

task sourcesJar(type: Jar) {
    description = 'Creates sources JAR.'
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

project.publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            groupId project.group
            version project.version
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

license {
    header rootProject.file('config/license_header.txt')

    // Toggle ignoreFailures to false to enable license-checking that will fail the build
    ignoreFailures true

    ext.name = 'Christopher J. Stehno'
    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks'])
}

